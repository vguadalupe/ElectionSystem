{"version":3,"file":"datepicker-base.d.ts","sources":["datepicker-base.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { Overlay, ScrollStrategy } from '@angular/cdk/overlay';\r\nimport { ComponentType, TemplatePortal } from '@angular/cdk/portal';\r\nimport { AfterViewInit, ElementRef, EventEmitter, InjectionToken, NgZone, OnDestroy, ViewContainerRef, ChangeDetectorRef, OnChanges, SimpleChanges, OnInit } from '@angular/core';\r\nimport { CanColor, CanColorCtor, DateAdapter, ThemePalette } from '@angular/material/core';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { MatCalendar, MatCalendarView } from './calendar';\r\nimport { MatCalendarUserEvent, MatCalendarCellClassFunction } from './calendar-body';\r\nimport { DateFilterFn } from './datepicker-input-base';\r\nimport { ExtractDateTypeFromSelection, MatDateSelectionModel, DateRange } from './date-selection-model';\r\nimport { MatDateRangeSelectionStrategy } from './date-range-selection-strategy';\r\nimport { MatDatepickerIntl } from './datepicker-intl';\r\n/** Injection token that determines the scroll handling while the calendar is open. */\r\nexport declare const MAT_DATEPICKER_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\r\n/** @docs-private */\r\nexport declare function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;\r\n/** Possible positions for the datepicker dropdown along the X axis. */\r\nexport declare type DatepickerDropdownPositionX = 'start' | 'end';\r\n/** Possible positions for the datepicker dropdown along the Y axis. */\r\nexport declare type DatepickerDropdownPositionY = 'above' | 'below';\r\n/** @docs-private */\r\nexport declare const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER: {\r\n    provide: InjectionToken<() => ScrollStrategy>;\r\n    deps: (typeof Overlay)[];\r\n    useFactory: typeof MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY;\r\n};\r\n/** @docs-private */\r\ndeclare class MatDatepickerContentBase {\r\n    _elementRef: ElementRef;\r\n    constructor(_elementRef: ElementRef);\r\n}\r\ndeclare const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase;\r\n/**\r\n * Component used as the content for the datepicker overlay. We use this instead of using\r\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\r\n * place to put additional features of the overlay that are not part of the calendar itself in the\r\n * future. (e.g. confirmation buttons).\r\n * @docs-private\r\n */\r\nexport declare class MatDatepickerContent<S, D = ExtractDateTypeFromSelection<S>> extends _MatDatepickerContentMixinBase implements OnInit, AfterViewInit, OnDestroy, CanColor {\r\n    private _changeDetectorRef;\r\n    private _globalModel;\r\n    private _dateAdapter;\r\n    private _rangeSelectionStrategy;\r\n    private _subscriptions;\r\n    private _model;\r\n    /** Reference to the internal calendar component. */\r\n    _calendar: MatCalendar<D>;\r\n    /** Reference to the datepicker that created the overlay. */\r\n    datepicker: MatDatepickerBase<any, S, D>;\r\n    /** Start of the comparison range. */\r\n    comparisonStart: D | null;\r\n    /** End of the comparison range. */\r\n    comparisonEnd: D | null;\r\n    /** Whether the datepicker is above or below the input. */\r\n    _isAbove: boolean;\r\n    /** Current state of the animation. */\r\n    _animationState: 'enter-dropdown' | 'enter-dialog' | 'void';\r\n    /** Emits when an animation has finished. */\r\n    readonly _animationDone: Subject<void>;\r\n    /** Text for the close button. */\r\n    _closeButtonText: string;\r\n    /** Whether the close button currently has focus. */\r\n    _closeButtonFocused: boolean;\r\n    /** Portal with projected action buttons. */\r\n    _actionsPortal: TemplatePortal | null;\r\n    constructor(elementRef: ElementRef, _changeDetectorRef: ChangeDetectorRef, _globalModel: MatDateSelectionModel<S, D>, _dateAdapter: DateAdapter<D>, _rangeSelectionStrategy: MatDateRangeSelectionStrategy<D>, intl: MatDatepickerIntl);\r\n    ngOnInit(): void;\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    _handleUserSelection(event: MatCalendarUserEvent<D | null>): void;\r\n    _startExitAnimation(): void;\r\n    _getSelected(): D | DateRange<D> | null;\r\n    /** Applies the current pending selection to the global model. */\r\n    _applyPendingSelection(): void;\r\n}\r\n/** Form control that can be associated with a datepicker. */\r\nexport interface MatDatepickerControl<D> {\r\n    getStartValue(): D | null;\r\n    getThemePalette(): ThemePalette;\r\n    min: D | null;\r\n    max: D | null;\r\n    disabled: boolean;\r\n    dateFilter: DateFilterFn<D>;\r\n    getConnectedOverlayOrigin(): ElementRef;\r\n    getOverlayLabelId(): string | null;\r\n    stateChanges: Observable<void>;\r\n}\r\n/** A datepicker that can be attached to a {@link MatDatepickerControl}. */\r\nexport interface MatDatepickerPanel<C extends MatDatepickerControl<D>, S, D = ExtractDateTypeFromSelection<S>> {\r\n    /** Stream that emits whenever the date picker is closed. */\r\n    closedStream: EventEmitter<void>;\r\n    /** Color palette to use on the datepicker's calendar. */\r\n    color: ThemePalette;\r\n    /** The input element the datepicker is associated with. */\r\n    datepickerInput: C;\r\n    /** Whether the datepicker pop-up should be disabled. */\r\n    disabled: boolean;\r\n    /** The id for the datepicker's calendar. */\r\n    id: string;\r\n    /** Whether the datepicker is open. */\r\n    opened: boolean;\r\n    /** Stream that emits whenever the date picker is opened. */\r\n    openedStream: EventEmitter<void>;\r\n    /** Emits when the datepicker's state changes. */\r\n    stateChanges: Subject<void>;\r\n    /** Opens the datepicker. */\r\n    open(): void;\r\n    /** Register an input with the datepicker. */\r\n    registerInput(input: C): MatDateSelectionModel<S, D>;\r\n}\r\n/** Base class for a datepicker. */\r\nexport declare abstract class MatDatepickerBase<C extends MatDatepickerControl<D>, S, D = ExtractDateTypeFromSelection<S>> implements MatDatepickerPanel<C, S, D>, OnDestroy, OnChanges {\r\n    private _overlay;\r\n    private _ngZone;\r\n    private _viewContainerRef;\r\n    private _dateAdapter;\r\n    private _dir;\r\n    private _document;\r\n    private _model;\r\n    private _scrollStrategy;\r\n    private _inputStateChanges;\r\n    /** An input indicating the type of the custom header component for the calendar, if set. */\r\n    calendarHeaderComponent: ComponentType<any>;\r\n    /** The date to open the calendar to initially. */\r\n    get startAt(): D | null;\r\n    set startAt(value: D | null);\r\n    private _startAt;\r\n    /** The view that the calendar should start in. */\r\n    startView: 'month' | 'year' | 'multi-year';\r\n    /** Color palette to use on the datepicker's calendar. */\r\n    get color(): ThemePalette;\r\n    set color(value: ThemePalette);\r\n    _color: ThemePalette;\r\n    /**\r\n     * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\r\n     * than a dropdown and elements have more padding to allow for bigger touch targets.\r\n     */\r\n    get touchUi(): boolean;\r\n    set touchUi(value: boolean);\r\n    private _touchUi;\r\n    /** Whether the datepicker pop-up should be disabled. */\r\n    get disabled(): boolean;\r\n    set disabled(value: boolean);\r\n    private _disabled;\r\n    /** Preferred position of the datepicker in the X axis. */\r\n    xPosition: DatepickerDropdownPositionX;\r\n    /** Preferred position of the datepicker in the Y axis. */\r\n    yPosition: DatepickerDropdownPositionY;\r\n    /**\r\n     * Whether to restore focus to the previously-focused element when the calendar is closed.\r\n     * Note that automatic focus restoration is an accessibility feature and it is recommended that\r\n     * you provide your own equivalent, if you decide to turn it off.\r\n     */\r\n    get restoreFocus(): boolean;\r\n    set restoreFocus(value: boolean);\r\n    private _restoreFocus;\r\n    /**\r\n     * Emits selected year in multiyear view.\r\n     * This doesn't imply a change on the selected date.\r\n     */\r\n    readonly yearSelected: EventEmitter<D>;\r\n    /**\r\n     * Emits selected month in year view.\r\n     * This doesn't imply a change on the selected date.\r\n     */\r\n    readonly monthSelected: EventEmitter<D>;\r\n    /**\r\n     * Emits when the current view changes.\r\n     */\r\n    readonly viewChanged: EventEmitter<MatCalendarView>;\r\n    /** Function that can be used to add custom CSS classes to dates. */\r\n    dateClass: MatCalendarCellClassFunction<D>;\r\n    /** Emits when the datepicker has been opened. */\r\n    readonly openedStream: EventEmitter<void>;\r\n    /** Emits when the datepicker has been closed. */\r\n    readonly closedStream: EventEmitter<void>;\r\n    /**\r\n     * Classes to be passed to the date picker panel.\r\n     * Supports string and string array values, similar to `ngClass`.\r\n     */\r\n    get panelClass(): string | string[];\r\n    set panelClass(value: string | string[]);\r\n    private _panelClass;\r\n    /** Whether the calendar is open. */\r\n    get opened(): boolean;\r\n    set opened(value: boolean);\r\n    private _opened;\r\n    /** The id for the datepicker calendar. */\r\n    id: string;\r\n    /** The minimum selectable date. */\r\n    _getMinDate(): D | null;\r\n    /** The maximum selectable date. */\r\n    _getMaxDate(): D | null;\r\n    _getDateFilter(): DateFilterFn<D>;\r\n    /** A reference to the overlay into which we've rendered the calendar. */\r\n    private _overlayRef;\r\n    /** Reference to the component instance rendered in the overlay. */\r\n    private _componentRef;\r\n    /** The element that was focused before the datepicker was opened. */\r\n    private _focusedElementBeforeOpen;\r\n    /** Unique class that will be added to the backdrop so that the test harnesses can look it up. */\r\n    private _backdropHarnessClass;\r\n    /** Currently-registered actions portal. */\r\n    private _actionsPortal;\r\n    /** The input element this datepicker is associated with. */\r\n    datepickerInput: C;\r\n    /** Emits when the datepicker's state changes. */\r\n    readonly stateChanges: Subject<void>;\r\n    constructor(\r\n    /**\r\n     * @deprecated `_dialog` parameter is no longer being used and it will be removed.\r\n     * @breaking-change 13.0.0\r\n     */\r\n    _dialog: any, _overlay: Overlay, _ngZone: NgZone, _viewContainerRef: ViewContainerRef, scrollStrategy: any, _dateAdapter: DateAdapter<D>, _dir: Directionality, _document: any, _model: MatDateSelectionModel<S, D>);\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n    /** Selects the given date */\r\n    select(date: D): void;\r\n    /** Emits the selected year in multiyear view */\r\n    _selectYear(normalizedYear: D): void;\r\n    /** Emits selected month in year view */\r\n    _selectMonth(normalizedMonth: D): void;\r\n    /** Emits changed view */\r\n    _viewChanged(view: MatCalendarView): void;\r\n    /**\r\n     * Register an input with this datepicker.\r\n     * @param input The datepicker input to register with this datepicker.\r\n     * @returns Selection model that the input should hook itself up to.\r\n     */\r\n    registerInput(input: C): MatDateSelectionModel<S, D>;\r\n    /**\r\n     * Registers a portal containing action buttons with the datepicker.\r\n     * @param portal Portal to be registered.\r\n     */\r\n    registerActions(portal: TemplatePortal): void;\r\n    /**\r\n     * Removes a portal containing action buttons from the datepicker.\r\n     * @param portal Portal to be removed.\r\n     */\r\n    removeActions(portal: TemplatePortal): void;\r\n    /** Open the calendar. */\r\n    open(): void;\r\n    /** Close the calendar. */\r\n    close(): void;\r\n    /** Applies the current pending selection on the overlay to the model. */\r\n    _applyPendingSelection(): void;\r\n    /** Forwards relevant values from the datepicker to the datepicker content inside the overlay. */\r\n    protected _forwardContentValues(instance: MatDatepickerContent<S, D>): void;\r\n    /** Opens the overlay with the calendar. */\r\n    private _openOverlay;\r\n    /** Destroys the current overlay. */\r\n    private _destroyOverlay;\r\n    /** Gets a position strategy that will open the calendar as a dropdown. */\r\n    private _getDialogStrategy;\r\n    /** Gets a position strategy that will open the calendar as a dropdown. */\r\n    private _getDropdownStrategy;\r\n    /** Sets the positions of the datepicker in dropdown mode based on the current configuration. */\r\n    private _setConnectedPositions;\r\n    /** Gets an observable that will emit when the overlay is supposed to be closed. */\r\n    private _getCloseStream;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n    static ngAcceptInputType_opened: BooleanInput;\r\n    static ngAcceptInputType_touchUi: BooleanInput;\r\n    static ngAcceptInputType_restoreFocus: BooleanInput;\r\n}\r\nexport {};\r\n"]}